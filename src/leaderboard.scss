* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    min-height: 100vh;
    font-family: 'IBM Plex Mono', monospace;
    background-color: rgb(21, 21, 21);
}

div.error {
    color: #ff6492;
    padding: 10px;
    line-height: 1.5;
}

#round-input-container {
    font-size: 1.2rem;
    text-align: center;
    margin: 20px 5px;

    input {
        background-color: transparent;
        font: inherit;
        color: white;
        padding: 4px;

        border: 0;
        //? Accessibility?
        outline: 0;
        border-bottom: 1px solid rgb(187, 187, 187);

        width: 100px;

        text-align: center;
    }
}

// average open tabs while making this: 15

//! START TABLE STYLES
//* table of contents

//* I - IX:          sources
//* page 0-245:      styling just <table>
//* page 245-893:    <th> and <tr>
//* page 893-3124:   <thead>
//* page 3124-27100: prize colors

//* sources:
// “Border-Spacing - CSS: Cascading Style Sheets: MDN.” CSS: Cascading Style Sheets | MDN, Mozilla, https://developer.mozilla.org/en-US/docs/Web/CSS/border-spacing.

:root {
    // make sure to not use `border-collapse: collapse` with this
    --tableElementMargin: 10px;

    // margin to apply below the `thead`
    --tableHeadBottomMargin: 3px;

    // padding to apply to individual th elements (mostly to prevent text clipping)
    --tableCellPadding: 3px;

    // the default color for a player in the leaderboard (#64-n)
    --defaultColor: rgb(131, 131, 131);
}

main {
    max-width: 640px;
    margin: auto;
    margin: auto;
    color: white;
}

div.loading {
    text-align: center;
}

table {
    border-spacing: var(--tableElementMargin);
    border-collapse: separate;
    color: rgb(131, 131, 131);
    margin: auto;
}
thead th {
    padding-bottom: var(--tableHeadBottomMargin);
    color: white;
}

th {
    padding: var(--tableCellPadding);
}

tr > th:nth-child(2n + 1) {
    text-align: right;
}

tr > th:nth-child(2) {
    text-align: left;
    padding: var(--tableCellPadding) calc(var(--tableCellPadding) + 10px);
}

a,
a:visited {
    color: inherit;
    text-decoration: none;

    &:hover {
        text-decoration: underline;
    }
}

@media only screen and (max-width: 640px) {
    tr > th:nth-child(2) {
        text-align: left;
        max-width: 20ch;
        overflow: hidden;
        text-overflow: ellipsis;
    }
}

@media only screen and (max-width: 400px) {
    tr > th:nth-child(2) {
        max-width: 10ch;
        overflow: hidden;
        text-overflow: ellipsis;
    }
}

// Giraudel, Kitty. “Power Function.” CSS, 9 Feb. 2016, https://css-tricks.com/snippets/sass/power-function/.
@function pow($number, $exponent) {
    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    }

    @return $value;
}

// the colors for the 1st player, then the next 2, then the next 4, and so on
$colors: rgb(255, 68, 183), rgb(248, 183, 62), rgb(193, 60, 255), rgb(107, 104, 255),
    rgb(0, 220, 130), white;

//* the index of the current color
$colorI: 0;

//* the amount of people to paint in the current color
$colorAmt: 0;

//* at which index to begin drawing the $colorAmt people in the current color
$colorOffset: 0;

@each $color in $colors {
    $colorI: $colorI + 1;
    $colorAmt: pow(2, $colorI - 1) - 1;
    $colorOffset: pow(2, $colorI - 1);

    @for $i from $colorOffset through $colorOffset + $colorAmt {
        tbody > tr:nth-child(#{$i}) {
            color: $color;
        }
    }
}

// this could've been done in JS
// i don't regret anything
